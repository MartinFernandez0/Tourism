// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourismBackend.DataContext;

#nullable disable

namespace TourismBackend.Migrations
{
    [DbContext(typeof(TourismContext))]
    [Migration("20241104212530_UpdateModels")]
    partial class UpdateModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TourismServices.Models.pfActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("URLimage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("pfItineraryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("pfItineraryId");

                    b.ToTable("pfActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityName = "Buceo en Playa",
                            Cost = 50.00m,
                            Description = "Buceo en arrecifes de coral",
                            DestinationId = 1,
                            Duration = 2,
                            URLimage = "https://s3-us-west-2.amazonaws.com/wp-divingyucatan/wp-content/uploads/2020/03/30181654/diving-yucatan-ventajas-buceo.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            ActivityName = "Escalada en Montaña",
                            Cost = 75.00m,
                            Description = "Escalada guiada en roca",
                            DestinationId = 2,
                            Duration = 4,
                            URLimage = "https://aamtuc.org/wp-content/uploads/2020/08/Presentaci%C3%B3n.jpg"
                        },
                        new
                        {
                            Id = 3,
                            ActivityName = "Safari en la Selva",
                            Cost = 100.00m,
                            Description = "Exploración en la selva amazónica",
                            DestinationId = 3,
                            Duration = 3,
                            URLimage = "https://admin.panrotas.com.br/media/thumb/cropper/permalink/fix/1200,675/?source=media-files-original/2016/02/15/2c5c6ad76509fc0e15b9faefc7c72cdb-dorobosafaristanzania150216.jpg"
                        });
                });

            modelBuilder.Entity("TourismServices.Models.pfAdministrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("pfAdministrators");
                });

            modelBuilder.Entity("TourismServices.Models.pfClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("pfClients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateBirth = new DateTime(1985, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "12345678",
                            Email = "juan.perez@mail.com",
                            FirstName = "Juan",
                            LastName = "Pérez",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            DateBirth = new DateTime(1990, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "87654321",
                            Email = "maria.gonzalez@mail.com",
                            FirstName = "María",
                            LastName = "González",
                            PhoneNumber = "987654321"
                        },
                        new
                        {
                            Id = 3,
                            DateBirth = new DateTime(1988, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "11223344",
                            Email = "carlos.lopez@mail.com",
                            FirstName = "Carlos",
                            LastName = "López",
                            PhoneNumber = "456123789"
                        });
                });

            modelBuilder.Entity("TourismServices.Models.pfDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("URL_image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("pfDestinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Playa",
                            Country = "México",
                            Description = "Hermosa playa con arenas blancas",
                            Name = "Playa Paraíso",
                            URL_image = "https://imgs.search.brave.com/C5tkx-WUU6YIj0GGJZdF-TSyS_1X3UOs1eEbI6D-Xwc/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly93d3cu/Ym9va2F3YXkuY29t/L2Jsb2cvd3AtY29u/dGVudC91cGxvYWRz/LzIwMjMvMDEvUGxh/eWEtcGFyYWlzby0u/anBn"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Montaña",
                            Country = "Chile",
                            Description = "Montaña con vistas espectaculares",
                            Name = "Montaña Encantada",
                            URL_image = "https://lh3.googleusercontent.com/proxy/qJ0tsxrv8qWp0gUPwGcvY4SROCGlCNHt7chgRwCnBIiTLuUQQWnW54L1uCkqp34-LfqzWKOtd0Dkru_PlN7o8kghewZi0Xecoyg5hna7B-AiwkFfLQ"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Aventura",
                            Country = "Brasil",
                            Description = "Experiencia en la selva",
                            Name = "Selva Amazónica",
                            URL_image = "https://www.cronista.com/files/image/658/658401/64d235435ebc6.jpg"
                        });
                });

            modelBuilder.Entity("TourismServices.Models.pfItinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("pfDestinationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("pfDestinationId");

                    b.ToTable("pfItineraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartureDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "10 días en la playa",
                            Name = "Aventura en Playa",
                            ReturnDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DepartureDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Caminatas y exploración de montañas",
                            Name = "Exploración en Montaña",
                            ReturnDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DepartureDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Recorrido en la selva amazónica",
                            Name = "Selva Amazónica Tour",
                            ReturnDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TourismServices.Models.pfReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("ItineraryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("ItineraryId");

                    b.ToTable("pfReservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            DestinationId = 1,
                            ItineraryId = 1,
                            ReservationDate = new DateTime(2024, 11, 4, 18, 25, 24, 320, DateTimeKind.Local).AddTicks(7757),
                            ReservationStatus = 0
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            DestinationId = 2,
                            ItineraryId = 2,
                            ReservationDate = new DateTime(2024, 11, 4, 18, 25, 24, 320, DateTimeKind.Local).AddTicks(7772),
                            ReservationStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            DestinationId = 3,
                            ItineraryId = 3,
                            ReservationDate = new DateTime(2024, 11, 4, 18, 25, 24, 320, DateTimeKind.Local).AddTicks(7773),
                            ReservationStatus = 2
                        });
                });

            modelBuilder.Entity("TourismServices.Models.pfTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentConfirmation")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("pfTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 150.00m,
                            ClientId = 1,
                            PaymentConfirmation = 1,
                            PaymentMethod = 1,
                            TransactionDate = new DateTime(2024, 11, 4, 18, 25, 24, 320, DateTimeKind.Local).AddTicks(7806)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200.00m,
                            ClientId = 2,
                            PaymentConfirmation = 0,
                            PaymentMethod = 4,
                            TransactionDate = new DateTime(2024, 11, 4, 18, 25, 24, 320, DateTimeKind.Local).AddTicks(7809)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 120.00m,
                            ClientId = 3,
                            PaymentConfirmation = 2,
                            PaymentMethod = 3,
                            TransactionDate = new DateTime(2024, 11, 4, 18, 25, 24, 320, DateTimeKind.Local).AddTicks(7810)
                        });
                });

            modelBuilder.Entity("TourismServices.Models.pfActivity", b =>
                {
                    b.HasOne("TourismServices.Models.pfDestination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourismServices.Models.pfItinerary", null)
                        .WithMany("Activities")
                        .HasForeignKey("pfItineraryId");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TourismServices.Models.pfItinerary", b =>
                {
                    b.HasOne("TourismServices.Models.pfDestination", null)
                        .WithMany("Itineraries")
                        .HasForeignKey("pfDestinationId");
                });

            modelBuilder.Entity("TourismServices.Models.pfReservation", b =>
                {
                    b.HasOne("TourismServices.Models.pfClient", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourismServices.Models.pfDestination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourismServices.Models.pfItinerary", "Itinerary")
                        .WithMany()
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Destination");

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("TourismServices.Models.pfTransaction", b =>
                {
                    b.HasOne("TourismServices.Models.pfClient", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TourismServices.Models.pfClient", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("TourismServices.Models.pfDestination", b =>
                {
                    b.Navigation("Itineraries");
                });

            modelBuilder.Entity("TourismServices.Models.pfItinerary", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
